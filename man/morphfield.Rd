% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/morphr.R
\name{morphfield}
\alias{morphfield}
\title{Create an HTML morphological field widget using the DataTables library}
\usage{
morphfield(param_values = NULL, value_descriptions = NULL,
  placement = NULL, spec_columns = NULL, edit_mode = FALSE, id = NULL,
  set_spec_mode = FALSE, responsive = FALSE)
}
\arguments{
\item{param_values}{A named list of vectors/lists. The names of the list are
the names of the parameters (columns) in the morphological field. The
vectors/lists contain the possible values that the parameter can have.
If \code{param_values} is NULL (default), then an empty field is created.
Use \code{editable = TRUE} in \code{\link{installMorphField}} to fill the
empty field in the browser.}

\item{value_descriptions}{Optional. Each parameter value in param_values can
have an accompanying (long) description that will be shown as tooltip/popover.
The structure of \code{value_descriptions} is like that of \code{param_values},
but instead of containing parameter values as list elements, the parameter
values must be names whose list elements are the description texts.}

\item{placement}{Optional. Specify placement of value_description popovers.
E.g. 'auto right' or 'auto left'.}

\item{spec_columns}{Optional. A list of columns that shall be marked with dark
gray color. These can be "specifying" columns, e.g. a summarizing column like
for the selection of a scenario. These columns can then be seen as "input"
columns: By clicking them, one gets a certain "output" response from
the field, e.g. the parameter values that belong to a specific scenario.
The \code{spec_columns} can also be any other "special" columns.}

\item{id}{The unique ID string that the morphological field will have in the
HTML document. This ID can be used with functions like
\code{\link{dataTableProxy}}() to programmatically alter the field/table.}

\item{responsive}{Render morphfield responsively?}
}
\value{
List with items \code{field} (a \code{\link{datatable}} object) and
  \code{field_df} (the \code{data.frame} used to create the datatable object).
}
\description{
This function creates an HTML widget to display a morphological field (a kind
of table where each column represents the possible configurations of a
certain parameter) using the JavaScript library DataTables. This function is
called internally by \code{\link{installMorphField}()}.
}
\section{Details}{


The \code{param_values} contain the column-wise elements of the morphological
field in form of a named list. The names are the column headers (names of the
parameters of the field). The values are vectors/lists with the character
strings that represent the possible values that the parameter can take on.

There are two ways to constrain the possible configurations, i.e. parameter
value combinations, of the morphological field. Number one is to provide a
\emph{cross-consistency matrix (CCM)}, which lists the validity status of all
pair-wise parameter combinations (see below for details). Number two is to
provide a list of \emph{specific configurations}, which instead of listing
all value combinations lists only the valid configurations. Internally, the
specific configurations are converted to a CCM as well.

Note: If you plan to replace/update an existing field with another field that
has the same ID as the old one, then you should not use
\code{installMorphField}. Instead, use \code{\link{placeMorphFieldUI}} every
time you update the field, and run \code{\link{reactivateMorphField}} only
once on the ID of the field.
}

