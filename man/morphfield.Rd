% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/morphr.R
\name{morphfield}
\alias{morphfield}
\title{Create an HTML morphological field widget using the DataTables library}
\usage{
morphfield(param_values, value_descriptions = NULL, ccm = NULL,
  specific_configurations = NULL)
}
\arguments{
\item{param_values}{A named list of vectors/lists. The names of the list are
the names of the parameters (columns) in the morphological field. The
vectors/lists contain the possible values that the parameter can have.}

\item{value_descriptions}{Optional. Each parameter value in param_values can
have an accompanying (long) description that will be shown as tooltip/popover.
The structure of \code{value_descriptions} is like that of \code{param_values},
but instead of containing parameter values as list elements, the parameter
values must be names whose list elements are the description texts.}

\item{ccm}{Optional. The cross-consistency matrix (CCM) for the morphological
field can be given to constrain the possible configurations of the field.
If provided, the \code{specific_configurations} are ignored. See details.}

\item{specific_configurations}{Optional. The specific configurations are a
list of only the valid parameter configrations as alternative to the CCM.
If the \code{ccm} is also given, \code{specific_configurations} are
ignored. See details.}
}
\description{
This function creates an HTML widget to display a morphological field (a kind
of table where each column represents the possible configurations of a
certain parameter) using the JavaScript library DataTables. This function is
called internally by \code{\link{installMorphField}()}.
}
\section{Details}{


The \code{param_values} contain the column-wise elements of the morphological
field in form of a named list. The names are the column headers (names of the
parameters of the field). The values are vectors/lists with the character
strings that represent the possible values that the parameter can take on.

There are two ways to constrain the possible configurations, i.e. parameter
value combinations, of the morphological field. Number one is to provide a
\emph{cross-consistency matrix (CCM)}, which lists the validity status of all
pair-wise parameter combinations (see below for details). Number two is to
provide a list of \emph{specific configurations}, which instead of listing
all value combinations lists only the valid configurations. Internally, the
specific configurations are converted to a CCM as well.
}

\section{Cross-consistency matrix (CCM)}{


The \emph{CCM} contains a logical for each pair-wise comparison of the
parameter values of a morphological field, being TRUE if the combination of
the two values is consistent or valid, otherwise FALSE. It is a symmetric
matrix with empty diagonal. This means that the result of assessing the
consistency of value1 in param1 (column1 of the morphological field) with
value2 in param2 is the same as the consistency of value2 in param2 with
value1 in param1 (hence the symmetry). Parameter values are not cross-checked
with other values of the same parameter (hence the empty diagonal).

The CCM is stored as a list whose names are hash strings of the two compared
parameter/value pairs. Those hash strings can be created with the function
\code{\link{buildHashValue}()}. One could also store the CCM as a simple
matrix, but this has two drawbacks: (1) Even when a matrix is devlared to be
symmetric with \code{\link{Matrix::forceSymmetric}()}, this does not appear
to make the matrix \emph{stay} symmetric when it is modified, i.e. updating
the upper/lower triangle does not change the lower/upper triangle
accordingly. One must therefore decide for one half of the matrix and
remember to operate only on that. (2) It is slightly less straight forward to
look up the consistency for a given pair of values. One must first find the
indices corresponding to them. (However, this would be more trivial when the
matrix columns/rows are named.) I find it a bit easier to use
\code{\link{buildHashValue}()} on the value pair and use the hash for the
lookup in a named list, where one does not need to remember which value is
column, which is row.
}

\section{Specific configurations}{


With \emph{specific configurations}, one can define one or more parameter
columns to \emph{specify} the field. This means that choosing a value in the
specifying column sets the values of some or all other columns. It constrains
the field. Specifying columns are marked with a darker grey than normal
columns. The \code{specific_configurations} are expected to be a named list
of named lists of named lists. The top-level hierarchy names represent the
parameter names that are specifying. The next level names represent the
parameter's values that are specifying. The deepest level names represent the
parameter names that are specified and the values (list elements) are the
parameter value(s) that are specified (i.e. considered possible) in this
configuration. Defaults to NULL, i.e. no specification and the field is
\emph{open}.
}

