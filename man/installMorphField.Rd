% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/morphr-shiny.R
\name{installMorphField}
\alias{installMorphField}
\title{Install a morphological field widget in Shiny}
\usage{
installMorphField(input, output, id, param_values = NULL,
  value_descriptions = NULL, ccm = NULL, configurations = NULL,
  spec_columns = NULL, styleFunc = NULL, editable = FALSE,
  edit_mode = FALSE, edit_config_mode = FALSE)
}
\arguments{
\item{input}{The Shiny session's input object (the same as is passed into the
Shiny server function as an argument).}

\item{output}{The Shiny session's output object (the same as is passed into
the Shiny server function as an argument).}

\item{id}{The unique ID string that the morphological field will have in the
HTML document. This ID can be used with functions like
\code{\link{dataTableProxy}}() to programmatically alter the field/table.}

\item{param_values}{A named list of vectors/lists. The names of the list are
the names of the parameters (columns) in the morphological field. The
vectors/lists contain the possible values that the parameter can have.
If \code{param_values} is NULL (default), then an empty field is created.
Use \code{editable = TRUE} in \code{\link{installMorphField}} to fill the
empty field in the browser.}

\item{value_descriptions}{Optional. Each parameter value in param_values can
have an accompanying (long) description that will be shown as tooltip/popover.
The structure of \code{value_descriptions} is like that of \code{param_values},
but instead of containing parameter values as list elements, the parameter
values must be names whose list elements are the description texts.}

\item{ccm}{Optional. The cross-consistency matrix (CCM) for the morphological
field can be given to constrain the possible configurations of the field.
If provided, the \code{configurations} are ignored. See details.}

\item{configurations}{Optional. The configurations are a list of the valid
parameter configurations as alternative to the CCM. If the \code{ccm}
is also given, \code{configurations} are ignored. See details.}

\item{spec_columns}{Optional. A list of columns that shall be marked with dark
gray color. These can be "specifying" columns, e.g. a summarizing column like
for the selection of a scenario. These columns can then be seen as "input"
columns: By clicking them, one gets a certain "output" response from
the field, e.g. the parameter values that belong to a specific scenario.
The \code{spec_columns} can also be any other "special" columns.}

\item{styleFunc}{Optional function to style the field. It should accept the field
returned by \code{\link{morphfield}()} (actually a datatable as returned by
\code{\link{datatable}()}), modify it with \code{
field <- field \%>\% \link{formatStyle}(...)
}
or similar, and then return it.}

\item{editable}{Logical, if TRUE, a button is shown to enter the field edit
mode.}
}
\value{
The proxy object to the morphological field as returned by
  \code{\link{dataTableProxy}()}.
}
\description{
If you want to use the built-in functionality, you must use the function
\code{installMorphField} instead of \code{output$mf <-
\link{renderMorphField}(...)}. This is because it makes use of shiny's
reactivity, so it needs to install the morph field widget in the output
object and observe the input object.
}
\section{Details}{


The \code{param_values} contain the column-wise elements of the morphological
field in form of a named list. The names are the column headers (names of the
parameters of the field). The values are vectors/lists with the character
strings that represent the possible values that the parameter can take on.

There are two ways to constrain the possible configurations, i.e. parameter
value combinations, of the morphological field. Number one is to provide a
\emph{cross-consistency matrix (CCM)}, which lists the validity status of all
pair-wise parameter combinations (see below for details). Number two is to
provide a list of \emph{specific configurations}, which instead of listing
all value combinations lists only the valid configurations. Internally, the
specific configurations are converted to a CCM as well.

Note: If you plan to replace/update an existing field with another field that
has the same ID as the old one, then you should not use
\code{installMorphField}. Instead, use \code{\link{placeMorphFieldUI}} every
time you update the field, and run \code{\link{reactivateMorphField}} only
once on the ID of the field.
}

\section{Cross-consistency matrix (CCM)}{


The \emph{CCM} contains a logical for each pair-wise comparison of the
parameter values of a morphological field, being TRUE if the combination of
the two values is consistent or valid, otherwise FALSE. It is a symmetric
matrix with empty diagonal. This means that the result of assessing the
consistency of value1 in param1 (column1 of the morphological field) with
value2 in param2 is the same as the consistency of value2 in param2 with
value1 in param1 (hence the symmetry). Parameter values are not cross-checked
with other values of the same parameter (hence the empty diagonal).

The CCM is stored as a list whose names are hash strings of the two compared
parameter/value pairs. Those hash strings can be created with the function
\code{\link{buildHashValue}()}. One could also store the CCM as a simple
matrix, but this has two drawbacks: (1) Even when a matrix is devlared to be
symmetric with \code{\link{Matrix::forceSymmetric}()}, this does not appear
to make the matrix \emph{stay} symmetric when it is modified, i.e. updating
the upper/lower triangle does not change the lower/upper triangle
accordingly. One must therefore decide for one half of the matrix and
remember to operate only on that. (2) It is slightly less straight forward to
look up the consistency for a given pair of values. One must first find the
indices corresponding to them. (However, this would be more trivial when the
matrix columns/rows are named.) I find it a bit easier to use
\code{\link{buildHashValue}()} on the value pair and use the hash for the
lookup in a named list, where one does not need to remember which value is
column, which is row.

Right now, it is not possible to view or edit the CCM, but it can be
specified in code or, alternatively, be computed from configurations.
}

\section{Configurations}{


\emph{Configurations} are collections of parameter values that shall be
consistent with each other. With configurations, one can define consistencies,
from which the CCM is built. If configurations are specified, then all
parameter values are inconsistent with all other parameter values to begin
with. Then, the configurations are looped over and all combinations of all
values with all other values within each configuration are set to be consistent.

The \code{configurations} can be defined in one of two formats:

In the old compact format, \code{configurations} are expected to be
a named list of named lists of named lists. The top-level hierarchy names
represent the parameter names that are specifying. The next level names
represent the parameter's values that are specifying. The deepest level names
represent the parameter names that are specified and the values (list elements)
are the parameter value(s) that are specified (i.e. considered possible) in this
configuration.

In the new extended format, \code{configurations} are expected to be
a list of configurations, where each configuration is a list of items, and
each item is a list with names \code{param} and \code{value}, identifying the
parameter value.

\code{configurations} defaults to NULL: No constraints are applied and
the field is \emph{open}, i.e. every value is consistent with all other
values.

If \code{edit_mode} is \code{TRUE}, the configurations can also be set
interactively.
}

